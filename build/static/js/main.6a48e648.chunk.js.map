{"version":3,"sources":["logo.svg","ChatbotWindow.js","App.js","reportWebVitals.js","index.js"],"names":["App","useEffect","addResponseMessage","downloadLinkRef","useRef","className","handleNewUserMessage","newMessage","console","log","axios","method","url","headers","then","res","data","blob","Blob","ref","current","href","URL","createObjectURL","download","click","profileAvatar","logo","title","subtitle","style","display","ChatbotWindow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAAe,G,MAAA,IAA0B,kCC2E1BA,MAhEf,WACEC,qBAAU,WACRC,6BAAmB,mCAClB,IAEH,IAAMC,EAAkBC,mBA0CxB,OACE,sBAAKC,UAAU,MAAf,UAKE,cAAC,SAAD,CACEC,qBArCuB,SAACC,GAC5BC,QAAQC,IAAR,gCAAqCF,IAErCG,IACI,CACEC,OAAO,MACPC,IAAI,iBAAmBL,EACvBM,QAAQ,KAGVC,MAAM,SAAAC,GACJ,GAAmC,oBAAhCA,EAAIF,QAAQ,gBACf,CACEL,QAAQC,IAAIM,EAAIC,MAChB,IAAIC,EAAO,IAAIC,KAAK,CAACH,EAAIC,OACzBR,QAAQC,IAAIQ,GACZ,IAAIE,EAAMhB,EACVgB,EAAIC,QAAQC,KAAOC,IAAIC,gBAAgBN,GACvCT,QAAQC,IAAIa,IAAIC,gBAAgBN,IAChCE,EAAIC,QAAQI,SAAWjB,EAAa,OACpCY,EAAIC,QAAQK,QACZvB,6BAAmB,kBAGnBA,6BAAmBa,EAAIC,UAc3BU,cAAeC,EACbC,MAAM,UACNC,SAAS,KAEb,mBAAGC,MAAO,CAACC,QAAS,QAASV,KAAK,QAAQF,IAAKhB,EAA/C,qBCpCSH,MANf,WACE,OACE,cAACgC,EAAD,KClBWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6a48e648.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React,{ useEffect ,useRef} from 'react';\r\nimport { Widget, addResponseMessage } from 'react-chat-widget';\r\nimport axios from 'axios';\r\nimport 'react-chat-widget/lib/styles.css';\r\nimport logo from './logo.svg';\r\n\r\n// import Lottie from 'react-lottie';\r\n// import Animation from './bot.json';\r\n\r\n\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    addResponseMessage('Welcome to this awesome chat!');\r\n  }, []);\r\n\r\n  const downloadLinkRef = useRef();\r\n\r\n//   const defaultOptions = {\r\n//     loop: true,\r\n//     autoplay: true,\r\n//     animationData: Animation,\r\n//     isClickToPauseDisabled: true,\r\n//     rendererSettings: {\r\n//       preserveAspectRatio: 'xMidYMid slice'\r\n//     }\r\n//   };\r\n\r\n  const handleNewUserMessage = (newMessage) => {\r\n    console.log(`New message incoming! ${newMessage}`);\r\n    // Now send the message throught the backend API\r\n    axios(\r\n        {\r\n          method:\"GET\",\r\n          url:\"/api?user_req=\" + newMessage,\r\n          headers:{},\r\n          \r\n        }\r\n      ).then( res=>{\r\n          if(res.headers[\"content-type\"] === \"application/pdf\" )\r\n          {\r\n            console.log(res.data);\r\n            let blob = new Blob([res.data]);\r\n            console.log(blob);\r\n            let ref = downloadLinkRef;\r\n            ref.current.href = URL.createObjectURL(blob);\r\n            console.log(URL.createObjectURL(blob));\r\n            ref.current.download = newMessage + \".pdf\";\r\n            ref.current.click();\r\n            addResponseMessage(\"File Sent\");\r\n          }\r\n          else{\r\n            addResponseMessage(res.data);\r\n          }\r\n      });\r\n    \r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        {/* <Lottie options={defaultOptions} isClickToPauseDisabled={true}\r\n              height={1000}\r\n              width={1000}\r\n        /> */}\r\n      <Widget\r\n        handleNewUserMessage={handleNewUserMessage}\r\n        profileAvatar={logo}\r\n          title=\"ChatBot\"\r\n          subtitle=\"\"\r\n      />\r\n      <a style={{display: 'none'}} href='empty' ref={downloadLinkRef}>ref</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import './App.css';\nimport ChatbotWindow from './ChatbotWindow';\n\n//import axios from 'axios'\n\n// function ChatBotReuquest(){\n//   let result = \"\";\n  \n//   var config = {\n//     method: 'get',\n//     url: '/api?user_req=Lookup for hospital',\n//     headers: { }\n//   };\n  \n//   axios(config)\n//   .then(function (response) {\n//     console.log(JSON.stringify(response.data));\n//   })\n//   .catch(function (error) {\n//     console.log(error);\n//   });\n  \n//   return (\n//     <h1>{result}</h1>\n//   )\n\n// }\n\nfunction App() {\n  return (\n    <ChatbotWindow />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}